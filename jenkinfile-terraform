pipeline {
  agent any

  environment {
    AWS_REGION = "us-east-1"
    KUBECONFIG = "${WORKSPACE}/.kube/config"
    CLUSTER_NAME = "EKS_CLOUD"
    IAM_USER_ARN = "arn:aws:iam::352324842329:user/jyoti" // update if needed
  }

  stages {
    stage('Init Terraform') {
      steps {
        sh 'terraform init'
      }
    }

    stage('Plan Terraform') {
      steps {
        sh 'terraform plan'
      }
    }

    stage('Apply Terraform') {
      steps {
        sh 'terraform apply -auto-approve'
      }
    }

    stage('Wait for EKS cluster readiness') {
      steps {
        retry(5) {
          sh '''
            echo "‚è≥ Waiting for EKS to be ACTIVE..."
            sleep 30
            aws eks describe-cluster --region ${AWS_REGION} --name ${CLUSTER_NAME} --query 'cluster.status' --output text | grep ACTIVE
          '''
        }
      }
    }

    stage('Update kubeconfig') {
      steps {
        sh '''
          echo "üîÅ Updating kubeconfig to connect to EKS..."
          mkdir -p $(dirname ${KUBECONFIG})
          aws eks update-kubeconfig --region ${AWS_REGION} --name ${CLUSTER_NAME} --kubeconfig ${KUBECONFIG}
        '''
      }
    }

    stage('Configure aws-auth ConfigMap') {
      steps {
        sh '''
          echo "üîß Creating aws-auth ConfigMap..."
          cat <<EOF > aws-auth.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapUsers: |
    - userarn: ${IAM_USER_ARN}
      username: jyoti
      groups:
        - system:masters
EOF

          kubectl apply -f aws-auth.yaml --kubeconfig=${KUBECONFIG}
        '''
      }
    }

    stage('Verify Access') {
      steps {
        sh '''
          echo "üì° Verifying access with kubectl..."
          kubectl get nodes --kubeconfig=${KUBECONFIG}
        '''
      }
    }
  }

  post {
    failure {
      echo "‚ùå Pipeline failed. Please check logs."
    }
  }
}
