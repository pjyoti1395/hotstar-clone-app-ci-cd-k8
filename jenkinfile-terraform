pipeline {
  agent any

  environment {
    AWS_REGION = "us-east-1"
    KUBECONFIG = "${WORKSPACE}/.kube/config"
  }

  stages {
    stage('Init Terraform') {
      steps {
        dir('EKS_TERRAFORM') {
          sh 'terraform init'
        }
      }
    }

    stage('Plan Terraform') {
      steps {
        dir('EKS_TERRAFORM') {
          sh 'terraform plan'
        }
      }
    }

    stage('Apply Terraform') {
      steps {
        dir('EKS_TERRAFORM') {
          sh 'terraform apply -auto-approve'
        }
      }
    }

    stage('Wait for EKS cluster readiness') {
      steps {
        retry(5) {
          sh '''
            echo "‚è≥ Waiting for EKS to be ACTIVE..."
            sleep 20
            aws eks describe-cluster --region ${AWS_REGION} --name EKS_CLOUD --query 'cluster.status' --output text | grep ACTIVE
          '''
        }
      }
    }

    stage('Update kubeconfig') {
      steps {
        sh '''
          echo "üîÅ Updating kubeconfig to connect to EKS..."
          mkdir -p $(dirname ${KUBECONFIG})
          aws eks update-kubeconfig --region ${AWS_REGION} --name EKS_CLOUD --kubeconfig ${KUBECONFIG}
        '''
      }
    }

    stage('Configure aws-auth ConfigMap') {
      steps {
        sh '''
          echo "üîß Patching aws-auth config map..."
          # Example placeholder command
          # kubectl apply -f aws-auth.yaml --kubeconfig=${KUBECONFIG}
        '''
      }
    }

    stage('Verify Access') {
      steps {
        sh '''
          echo "üîç Verifying cluster access..."
          kubectl get nodes --kubeconfig=${KUBECONFIG}
        '''
      }
    }
  }

  post {
    failure {
      echo "‚ùå Pipeline failed. Please check logs."
    }
  }
}
