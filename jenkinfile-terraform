pipeline {
    agent any

    parameters {
        choice(name: 'Action', choices: ['apply', 'destroy'], description: 'Terraform Action')
    }

    environment {
        KUBECONFIG = "${env.WORKSPACE}/.kube/config"
    }

    stages {
        stage('Git Clone') {
            steps {
                git branch: 'main', url: 'https://github.com/pjyoti1395/hotstar-clone-app-ci-cd-k8'
            }
        }

        stage('Terraform Version Check') {
            steps {
                sh 'terraform --version'
            }
        }

        stage('Terraform Initialize') {
            steps {
                dir('EKS_TERRAFORM') {
                    sh 'terraform init -reconfigure'
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                dir('EKS_TERRAFORM') {
                    sh 'terraform validate'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('EKS_TERRAFORM') {
                    sh 'terraform plan'
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { params.Action == 'apply' }
            }
            steps {
                dir('EKS_TERRAFORM') {
                    sh '''
                        echo "üîÅ Updating kubeconfig to connect to EKS..."
                        sh 'echo "üí° Using kubeconfig path: $KUBECONFIG"'

                        aws eks update-kubeconfig --region us-east-1 --name EKS_CLOUD --kubeconfig ${KUBECONFIG}


                        echo "üöÄ Applying Terraform changes..."
                        terraform apply --auto-approve
                    '''
                }
            }
        }

        stage('Configure aws-auth ConfigMap') {
            when {
                expression { params.Action == 'apply' }
            }
            steps {
                script {
                    writeFile file: 'aws-auth.yaml', text: '''
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: arn:aws:iam::352324842329:role/eks-node-group-cloud
      username: system:node:{{EC2PrivateDNSName}}
      groups:
        - system:bootstrappers
        - system:nodes
    - rolearn: arn:aws:iam::352324842329:role/AdminAccess
      username: admin
      groups:
        - system:masters
'''
                    sh '''
                        echo "‚õÖ Applying aws-auth ConfigMap manually..."
                        kubectl apply -f aws-auth.yaml
                    '''
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.Action == 'destroy' }
            }
            steps {
                dir('EKS_TERRAFORM') {
                    sh '''
                        echo "üîÅ Updating kubeconfig to connect to EKS..."
                        sh 'echo "üí° Using kubeconfig path: $KUBECONFIG"'

                        aws eks update-kubeconfig --region us-east-1 --name EKS_CLOUD --kubeconfig ${KUBECONFIG}


                        echo "‚ö†Ô∏è Destroying Terraform-managed infrastructure..."
                        terraform destroy --auto-approve
                    '''
                }
            }
        }
    }
}
